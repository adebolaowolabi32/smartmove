<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow
  http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

    <view-state id="book" view="tickets/book" model="flowScope.scheduleBooking">
        <on-entry>
            <set name="flowScope.scheduleBooking"
                 value="new com.interswitch.smartmoveserver.model.view.ScheduleBooking()"/>
            <set name="flowScope.return" value="false"/>
            <!--<evaluate result="viewScope.today" expression="T(com.interswitch.smartmoveserver.util.DateUtil).getTodayDate())"/>-->
            <evaluate result="flowScope.terminals" expression="ticketService.getTerminals()"/>
            <evaluate result="flowScope.schedules" expression="ticketService.getSchedules()"/>
        </on-entry>
        <transition on="findBooking" to="schedule">
            <evaluate result="flowScope.scheduleBooking"
                      expression="ticketService.findBooking(currentUser.name, flowScope.scheduleBooking)"/>
        </transition>
        <on-exit>
            <evaluate
                    expression="T(org.slf4j.LoggerFactory).getLogger(getClass()).info('Leaving ticket book flow')"/>
        </on-exit>
    </view-state>

    <view-state id="schedule" view="tickets/schedule" model="flowScope.scheduleBooking">
        <on-entry>
            <evaluate
                    expression="T(org.slf4j.LoggerFactory).getLogger(getClass()).info('Entering schedule flow')"/>
        </on-entry>
        <transition on="findBooking" to="schedule">
            <evaluate result="flowScope.scheduleBooking"
                      expression="ticketService.findBooking(currentUser.name, flowScope.scheduleBooking)"/>
        </transition>
        <transition on="makeBooking" to="showReturnSchedule"/>
        <on-exit>
            <evaluate
                    expression="T(org.slf4j.LoggerFactory).getLogger(getClass()).info('Leaving ticket schedule flow')"/>
        </on-exit>
    </view-state>

    <action-state id="showReturnSchedule">
        <on-entry>
            <set name="flowScope.roundTrip" value="flowScope.scheduleBooking.roundTrip"/>
            <evaluate result="flowScope.roundTrip" expression="flowScope.return ? false : flowScope.roundTrip"/>
        </on-entry>
        <evaluate expression="flowScope.roundTrip"/>
        <transition on="yes" to="schedule">
            <evaluate result="flowScope.return" expression="true"/>
            <evaluate result="flowScope.ticketDetails"
                      expression="ticketService.makeBooking(currentUser.name,requestParameters.scheduleId, requestParameters.noOfPassengers)"/>
        </transition>
        <transition on="no" to="makeBooking"/>
    </action-state>

    <action-state id="makeBooking">
        <evaluate expression="flowScope.return"/>
        <transition on="yes" to="collect-details">
            <evaluate result="flowScope.ticketDetails"
                      expression="ticketService.makeReturnBooking(flowScope.ticketDetails, requestParameters.scheduleId)"/>
        </transition>
        <transition on="no" to="collect-details">
            <evaluate result="flowScope.ticketDetails"
                      expression="ticketService.makeBooking(currentUser.name,requestParameters.scheduleId, requestParameters.noOfPassengers)"/>
        </transition>
    </action-state>

    <view-state id="collect-details" view="tickets/collect-details" model="flowScope.ticketDetails">
        <transition on="next" to="confirmation">
            <evaluate result="flowScope.ticketDetails" expression=
                    "ticketService.getTickets(currentUser.name, flowScope.ticketDetails)"/>
        </transition>
        <transition on="back" to="schedule"/>
    </view-state>

    <view-state id="confirmation" view="tickets/confirmation" model="flowScope.ticketDetails">
        <transition on="confirmBooking" to="preview">
            <evaluate result="flowScope.ticketDetails" expression=
                    "ticketService.confirmTickets(currentUser.name, flowScope.ticketDetails)"/>
        </transition>
        <transition on="back" to="collect-details"/>
    </view-state>

    <view-state id="preview" view="tickets/preview" model="flowScope.ticketDetails">
    </view-state>

    <end-state id="cancel"/>
</flow>